# -*- coding: utf-8 -*-
"""ProyectoETL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjnCpv7yHyv77VJ2Lm-DsVYe-_xjrAkK

### Montar Google Drive en Google Colab
"""

from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir la ruta base donde están los archivos
ruta_base = "/content/drive/My Drive/Archivos Fuentes/"

"""### Lectura de archivos CSV
1. Ingesta Secop 1
"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SECOP/SECOP 1. CONSULTA PRINCIPALES.csv"

# Leer archivo CSV delimitado por ','
df_secop1_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_secop1_csv.head())

# Traer el listado de todas las columnas
columnas = df_secop1_csv.columns.to_list()

# Mostrar el resultado
print(columnas)

# Seleccionar columnas de interes
df_filtrado_secop1_csv = df_secop1_csv[['Anno Cargue SECOP','Nombre Entidad','NIT de la Entidad','Tipo De Contrato','Municipios Ejecucion','Numero de Contrato','Cuantia Proceso','Cuantia Contrato','Valor Total de Adiciones','Valor Contrato con Adiciones','Municipio Entidad','Departamento Entidad']]

# Mostrar el resultado
print(df_filtrado_secop1_csv)

# Filtrar el DataFrame para que solo contenga las filas donde 'Año' es 2024
df_filtrado_secop1_2024 = df_filtrado_secop1_csv[df_filtrado_secop1_csv['Anno Cargue SECOP'] == 2024]

# Mostrar el resultado
print(df_filtrado_secop1_2024)

# Definir la ruta donde guardaremos el archivo sin encabezado
ruta_sin_encabezado = ruta_base + "SECOP/df_filtrado_secop1_2024.csv"

# Guardar el DataFrame sin encabezado (header=False)
df_filtrado_secop1_2024.to_csv(ruta_sin_encabezado, index=False, header=True)

"""2. Ingesta Secop 2"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SECOP/SECOP 2. CONSULTA PRINCIPALES.csv"

# Leer archivo CSV delimitado por ','
df_secop2_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_secop2_csv.head())

# Traer el listado de todas las columnas
columnas = df_secop2_csv.columns.to_list()

# Mostrar el resultado
print(columnas)

# Seleccionar columnas de interes
df_filtrado_secop2_csv = df_secop2_csv[['Entidad','Nit Entidad','Fecha de Publicacion del Proceso']]

# Mostrar el resultado
print(df_filtrado_secop2_csv)

# Convertir la columna 'Fecha de Publicacion del Proceso' a tipo datetime con dayfirst=False
df_filtrado_secop2_csv['Fecha de Publicacion del Proceso'] = pd.to_datetime(df_filtrado_secop2_csv['Fecha de Publicacion del Proceso'], dayfirst=False)

# Filtrar el DataFrame para que solo contenga las filas donde el año sea 2024
df_filtrado_secop2_2024 = df_filtrado_secop2_csv[df_filtrado_secop2_csv['Fecha de Publicacion del Proceso'].dt.year == 2024]

# Mostrar el resultado
print(df_filtrado_secop2_2024)

# Definir la ruta donde guardaremos el archivo sin encabezado
ruta_sin_encabezado = ruta_base + "SECOP/df_filtrado_secop2_2024.csv"

# Guardar el DataFrame sin encabezado (header=False)
df_filtrado_secop2_2024.to_csv(ruta_sin_encabezado, index=False, header=True)

"""3. Ingesta Matriz Proyectos"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "MATRIZ_PROYECTOS/MATRIZ GESTIÓN DE PROYECTOS 04-03-2025.csv"

# Leer archivo CSV delimitado por ','
df_matrizgestionproyectos_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_matrizgestionproyectos_csv.head(10))

# Traer info general de la matriz
df_matrizgestionproyectos_csv.info()

# Traer el listado de todas las columnas
columnas = df_matrizgestionproyectos_csv.columns.to_list()

# Mostrar el resultado
print(columnas)

# Seleccionar columnas de interes
df_filtrado_matrizgestionproyectos_csv = df_matrizgestionproyectos_csv[['Estado Principal','Estado Derivados',' Valor Aporte de la Entidad ($)','N Proyecto / Contrato / Convenio / ','Entidad Contratante','Departamento','Año',' Valor Aporte de la Entidad ($).1','Porcentaje Aporte de la Entidad (%)','Valor Aporte de Fonpacífico ($)','Porcentaje Aporte de Fonpacífico (%)','Entidad del Derivado']]

# Mostrar el resultado
print(df_filtrado_matrizgestionproyectos_csv)

# Filtrar el DataFrame para que solo contenga las filas donde 'Año' es 2024
df_filtrado_matrizgestionproyectos_2024 = df_filtrado_matrizgestionproyectos_csv[df_filtrado_matrizgestionproyectos_csv['Año'] == 2024]

# Mostrar el resultado
print(df_filtrado_matrizgestionproyectos_2024)

# Definir la ruta donde guardaremos el archivo sin encabezado
ruta_sin_encabezado = ruta_base + "MATRIZ_PROYECTOS/df_filtrado_matrizgestionproyectos_2024.csv"

# Guardar el DataFrame sin encabezado (header=False)
df_filtrado_matrizgestionproyectos_2024.to_csv(ruta_sin_encabezado, index=False, header=True)

"""4. Ingesta SPGR - Cronograma Flujos 2025"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SPGR/SPGR. ExportarCRONOGRAMA DE FLUJOS 04-03-2025.csv"

# Leer archivo CSV delimitado por ','
df_spgr_cronograma_flujos_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_spgr_cronograma_flujos_csv.head())

"""5. Ingesta SPGR - Pagos 2025"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SPGR/SPGR. ExportarPAGOS 04-03-2025.csv"

# Leer archivo CSV delimitado por ','
df_spgr_pagos_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_spgr_pagos_csv.head())

"""6. Ingesta SOUL - Recaudos 2024"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SOUL/RECAUDO2.csv"

# Leer archivo CSV delimitado por ','
df_recaudos_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_recaudos_csv.head())

# Traer el listado de todas las columnas
columnas = df_recaudos_csv.columns.to_list()

# Mostrar el resultado
print(columnas)

# Seleccionar columnas de interes
df_filtrado_recaudo_csv = df_recaudos_csv[['fecha','factura','nombre','consignacion','deducciones','nombre']]

# Mostrar el resultado
print(df_filtrado_recaudo_csv)

# Definir la ruta donde guardaremos el archivo sin encabezado
ruta_sin_encabezado = ruta_base + "SOUL/df_filtrado_recaudo.csv"

# Guardar el DataFrame sin encabezado (header=False)
df_filtrado_recaudo_csv.to_csv(ruta_sin_encabezado, index=False, header=True)

"""7. Ingesta SOUL - Facturacion 2024"""

import pandas as pd

# Ruta con nombre del archivo csv en Google Drive
ruta_csv = ruta_base + "SOUL/EXCEL_FACTURACION_2024.csv"

# Leer archivo CSV delimitado por ','
df_facturacion_csv = pd.read_csv(ruta_csv, delimiter=";")
print("\nDatos del archivo CSV:")
print(df_facturacion_csv.head())

# Traer el listado de todas las columnas
columnas = df_facturacion_csv.columns.to_list()

# Mostrar el resultado
print(columnas)

# Seleccionar columnas de interes
df_filtrado_facturacion_csv = df_facturacion_csv[['codigo','fecha','subtotal','total','saldo','nom_tercero','abonos','nom_tercero']]

# Mostrar el resultado
print(df_filtrado_facturacion_csv)

# Definir la ruta donde guardaremos el archivo sin encabezado
ruta_sin_encabezado = ruta_base + "SOUL/df_filtrado_facturacion.csv"

# Guardar el DataFrame sin encabezado (header=False)
df_filtrado_facturacion_csv.to_csv(ruta_sin_encabezado, index=False, header=True)

"""### Combinar Fuentes de SOUL"""

import pandas as pd

# Cargar los archivos CSV
df_recaudo = pd.read_csv('/content/drive/My Drive/Archivos Fuentes/SOUL/df_filtrado_recaudo.csv')
df_facturacion = pd.read_csv('/content/drive/My Drive/Archivos Fuentes/SOUL/df_filtrado_facturacion.csv')

# Realizar el merge entre los dos DataFrames
df_combinado_facturacion_recaudos = pd.merge(df_recaudo, df_facturacion, left_on='factura', right_on='codigo', how='inner')

# Mostrar el DataFrame combinado
print(df_combinado_facturacion_recaudos)

# Si deseas guardar el DataFrame combinado en un nuevo archivo CSV:
ruta_salida = '/content/drive/My Drive/Archivos Fuentes/SOUL/df_combinado_facturacion_recaudos.csv'
df_combinado_facturacion_recaudos.to_csv(ruta_salida, index=False)

"""### Combinar Fuentes de SOUL Y Matriz Proyectos"""

import pandas as pd

# Cargar los archivos CSV

df_combinado_facturacion_recaudos = pd.read_csv('/content/drive/My Drive/Archivos Fuentes/SOUL/df_combinado_facturacion_recaudos.csv')
df_matrizgestionproyectos = pd.read_csv('/content/drive/My Drive/Archivos Fuentes/MATRIZ_PROYECTOS/df_filtrado_matrizgestionproyectos_2024.csv')

# Realizar el merge entre los dos DataFrames
df_combinado_facturacion_recaudos_matriz = pd.merge(df_combinado_facturacion_recaudos, df_matrizgestionproyectos, left_on='nom_tercero', right_on='Entidad del Derivado', how='inner')

# Mostrar el DataFrame combinado
print(df_combinado_facturacion_recaudos_matriz)

# Si deseas guardar el DataFrame combinado en un nuevo archivo CSV:
ruta_salida = '/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz.csv'
df_combinado_facturacion_recaudos_matriz.to_csv(ruta_salida, index=False)

"""### Limpieza Matriz Combinada SOUL Y Matriz Proyectos




"""

import pandas as pd

# Cargar los archivos CSV
df_combinado_facturacion_recaudos_matriz = pd.read_csv('/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz.csv')

# Eliminar columnas específicas
df_combinado_facturacion_recaudos_matriz2 = df_combinado_facturacion_recaudos_matriz.drop(
    columns=['nom_tercero', 'nom_tercero.1', 'Entidad del Derivado','Departamento','Año','nombre.1',' Valor Aporte de la Entidad ($).1','Estado Derivados','subtotal']
)

# Mostrar el DataFrame después de eliminar las columnas
print(df_combinado_facturacion_recaudos_matriz2)

# Definir la ruta donde se guardará el archivo
ruta_salida = '/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz2.csv'

# Guardar el DataFrame modificado en un nuevo archivo CSV
df_combinado_facturacion_recaudos_matriz2.to_csv(ruta_salida, index=False)

"""### Filtrar el DataFrame por la columna "Estado Derivados"
"""

# Filtrar el DataFrame df_combinado_facturacion_recaudos_matriz2 donde la columna 'Estado Derivados' sea igual a 'Ejecución'
df_combinado_facturacion_recaudos_matriz3 = df_combinado_facturacion_recaudos_matriz2[df_combinado_facturacion_recaudos_matriz2['Estado Principal'] == 'Ejecución']

# Mostrar el DataFrame filtrado
print(df_combinado_facturacion_recaudos_matriz3)

# Imprimir los nombres de las columnas
print(df_combinado_facturacion_recaudos_matriz3.columns)

# Definir la ruta donde se guardará el archivo filtrado
ruta_salida_filtrada = '/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz3.csv'

# Guardar el DataFrame filtrado en un nuevo archivo CSV
df_combinado_facturacion_recaudos_matriz3.to_csv(ruta_salida_filtrada, index=False)

"""### Reorganizar las columnas"""

# Definir el nuevo orden de las columnas
nuevo_orden_columnas = ['N Proyecto / Contrato / Convenio / ', 'Estado Principal', 'Entidad Contratante', ' Valor Aporte de la Entidad ($)', 'Porcentaje Aporte de la Entidad (%)','Valor Aporte de Fonpacífico ($)','Porcentaje Aporte de Fonpacífico (%)','nombre','codigo','fecha_y',
                        'total','saldo','abonos','factura','fecha_x','consignacion','deducciones']
# Reorganizar las columnas del DataFrame y asignarlo a df_combinado_facturacion_recaudos_matriz4
df_combinado_facturacion_recaudos_matriz4 = df_combinado_facturacion_recaudos_matriz3[nuevo_orden_columnas]

# Mostrar el DataFrame después de reorganizar las columnas
print(df_combinado_facturacion_recaudos_matriz4)

# Definir la ruta donde se guardará el archivo con las columnas reorganizadas
ruta_salida_reorganizada = '/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz4.csv'

# Guardar el DataFrame reorganizado en un nuevo archivo CSV
df_combinado_facturacion_recaudos_matriz4.to_csv(ruta_salida_reorganizada, index=False)

"""### Verificar Formato Dato"""

# Verificar los tipos de datos en las columnas de interés
print(df_combinado_facturacion_recaudos_matriz4[[' Valor Aporte de la Entidad ($)', 'Valor Aporte de Fonpacífico ($)','total','saldo','abonos','consignacion','deducciones']].dtypes)

# Verificar el tipo de los primeros valores de las columnas
print(df_combinado_facturacion_recaudos_matriz4[[' Valor Aporte de la Entidad ($)', 'Valor Aporte de Fonpacífico ($)','total','saldo','abonos','consignacion','deducciones']].head())

"""### Eliminar Formato Predeterminado - Grupo 1"""

# Función corregida para limpiar y formatear valores monetarios
def limpiar_monto(valor):
    if isinstance(valor, str):
        return round(float(valor.replace("$", "").replace(".", "").replace(",", ".")), 2)
    elif isinstance(valor, (int, float)):  # Si ya es numérico, solo redondear
        return round(valor, 2)
    else:
        return None  # Manejo de valores inesperados

# Columnas del Grupo 1 que requieren limpieza
columnas_monetarias = [" Valor Aporte de la Entidad ($)", "Valor Aporte de Fonpacífico ($)"]

# Aplicamos la limpieza asegurando 2 decimales
df_montos_limpios = df_combinado_facturacion_recaudos_matriz4[columnas_monetarias].applymap(limpiar_monto)

# Verificar resultado
print("🔹 Limpieza de montos:")
print(df_montos_limpios.head())

"""### Eliminar Formato Predeterminado - Grupo 2"""

# Función para limpiar valores numéricos y asegurar 2 decimales
def limpiar_numero(valor):
    return round(float(valor.replace(",", ".")), 2) if isinstance(valor, str) else round(valor, 2)

# Columnas del Grupo 2 que requieren limpieza
columnas_numericas = ["total", "abonos", "consignacion", "deducciones"]

# Aplicamos la limpieza asegurando uniformidad en los decimales
df_numeros_limpios = df_combinado_facturacion_recaudos_matriz4[columnas_numericas].applymap(limpiar_numero)

# Verificar resultado
print("🔹 Limpieza de números:")
print(df_numeros_limpios.head())

"""### Eliminar Formato Predeterminado - Grupo 3"""

# Función corregida para limpiar y formatear "saldo" con dos decimales
def limpiar_saldo(valor):
    if isinstance(valor, str) and valor.replace(",", "").replace(".", "").isdigit():
        return round(float(valor.replace(",", ".")), 2)  # Convierte texto a float con punto decimal
    elif isinstance(valor, (int, float)):
        return round(valor, 2)  # Si ya es numérico, solo redondea
    else:
        return 0.00  # Si no es número válido, devolver 0.00

# Aplicamos la limpieza asegurando 2 decimales
df_saldo_limpio = df_combinado_facturacion_recaudos_matriz4["saldo"].apply(limpiar_saldo)

# Verificar resultado
print("🔹 Limpieza de saldo:")
print(df_saldo_limpio.head())

"""### Combinar y Guardar los Datos Limpios"""

# 🔹 Ruta donde se guardará el archivo
ruta_guardado = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_limpieza_datos.csv"

# 🔹 Crear una copia del DataFrame original para mantener la estructura
df_combinado_facturacion_recaudos_matriz_limpieza_datos = df_combinado_facturacion_recaudos_matriz4.copy()

# 🔹 Reemplazar las columnas con los datos ya limpiados
df_combinado_facturacion_recaudos_matriz_limpieza_datos[columnas_monetarias] = df_montos_limpios
df_combinado_facturacion_recaudos_matriz_limpieza_datos[columnas_numericas] = df_numeros_limpios
df_combinado_facturacion_recaudos_matriz_limpieza_datos["saldo"] = df_saldo_limpio

# 🔹 Guardar en la ruta especificada en Google Drive
df_combinado_facturacion_recaudos_matriz_limpieza_datos.to_csv(ruta_guardado, index=False, encoding="utf-8")

# 🔹 Verificar el resultado
print(f"✅ Archivo guardado en: {ruta_guardado}")
print(df_combinado_facturacion_recaudos_matriz_limpieza_datos.head())

"""### Renombrar las columnas"""

import pandas as pd

# 🔹 Ruta donde se guardará el archivo
ruta_guardado = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_limpieza_datos.csv"

# 🔹 Crear una copia del DataFrame original para mantener la estructura
df_combinado_facturacion_recaudos_matriz_limpieza_datos = df_combinado_facturacion_recaudos_matriz4.copy()

# 🔹 Reemplazar las columnas con los datos ya limpiados
df_combinado_facturacion_recaudos_matriz_limpieza_datos[columnas_monetarias] = df_montos_limpios
df_combinado_facturacion_recaudos_matriz_limpieza_datos[columnas_numericas] = df_numeros_limpios
df_combinado_facturacion_recaudos_matriz_limpieza_datos["saldo"] = df_saldo_limpio

# 🔹 Guardar en la ruta especificada en Google Drive
df_combinado_facturacion_recaudos_matriz_limpieza_datos.to_csv(ruta_guardado, index=False, encoding="utf-8")

# 🔹 Verificar el resultado
print(f"✅ Archivo guardado en: {ruta_guardado}")
print(df_combinado_facturacion_recaudos_matriz_limpieza_datos.head())

# 🔹 Renombrar las columnas después de limpiar los datos
nuevos_nombres_columnas = [
    'ID PROYECTO / ID CONTRATO / ID CONVENIO',
    'ESTADO',
    'ENTIDAD CONTRATANTE',
    'VALOR APORTE DE LA ENTIDAD',
    'PORCENTAJE APORTE DE LA ENTIDAD',
    'VALOR APORTE FONPACIFICO',
    'PORCENTAJE APORTE FONPACIFICO',
    'ENTIDAD DEL DERIVADO',
    'CODIGO FACTURACION',
    'FECHA FACTURACION',
    'VALOR FACTURACION',
    'VALOR EN SALDO',
    'VALOR DE ABONOS',
    'CODIGO RECAUDO',
    'FECHA DE RECAUDACION',
    'VALOR CONSIGNADO',
    'VALOR DEDUCCIONES'
]

# 🔹 Asegurarse de que el número de columnas coincida
df_combinado_facturacion_recaudos_matriz_renombrado = df_combinado_facturacion_recaudos_matriz_limpieza_datos.copy()
df_combinado_facturacion_recaudos_matriz_renombrado.columns = nuevos_nombres_columnas

# 🔹 Ruta para guardar el archivo con las columnas renombradas
ruta_guardado_renombrado = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_renombrado.csv"

# 🔹 Guardar el DataFrame con las columnas renombradas
df_combinado_facturacion_recaudos_matriz_renombrado.to_csv(ruta_guardado_renombrado, index=False, encoding="utf-8")

# 🔹 Confirmación
print(f"✅ Archivo con columnas renombradas guardado en: {ruta_guardado_renombrado}")
print(df_combinado_facturacion_recaudos_matriz_renombrado.head())

"""### Formatear los Números

"""

import pandas as pd
import openpyxl
from openpyxl.styles import Alignment, numbers

# 🔹 Ruta del archivo CSV con columnas renombradas
ruta_csv_renombrado = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_renombrado.csv"

# 🔹 Cargar el archivo renombrado
df_combinado_facturacion_recaudos_matriz_renombrado = pd.read_csv(ruta_csv_renombrado)

# 🔹 Excluir las columnas no deseadas
columnas_excluir = ["TASA DE RECAUDO (%)", "ÍNDICE DE LIQUIDEZ"]
df_combinado_facturacion_recaudos_matriz_renombrado = df_combinado_facturacion_recaudos_matriz_renombrado.drop(columns=columnas_excluir, errors="ignore")

# 🔹 Aplicar formato de moneda en los valores numéricos
def aplicar_formato_moneda(valor):
    if isinstance(valor, (int, float)):
        return f"${valor:,.2f}"  # Agrega $ y mantiene el formato numérico
    return valor

# 🔹 Identificar columnas numéricas para aplicar formato
columnas_monetarias = [
    'VALOR APORTE DE LA ENTIDAD', 'VALOR APORTE FONPACIFICO',
    'VALOR FACTURACION', 'VALOR EN SALDO', 'VALOR DE ABONOS',
    'VALOR CONSIGNADO', 'VALOR DEDUCCIONES'
]

# 🔹 Aplicar formato a las columnas numéricas
df_combinado_facturacion_recaudos_matriz_formato_datos = df_combinado_facturacion_recaudos_matriz_renombrado.copy()
for columna in columnas_monetarias:
    if columna in df_combinado_facturacion_recaudos_matriz_formato_datos.columns:
        df_combinado_facturacion_recaudos_matriz_formato_datos[columna] = df_combinado_facturacion_recaudos_matriz_formato_datos[columna].apply(aplicar_formato_moneda)

# 🔹 Ruta donde se guardará el archivo CSV formateado
ruta_guardado_formato_csv = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_formato_datos.csv"

# 🔹 Guardar en CSV con el formato aplicado
df_combinado_facturacion_recaudos_matriz_formato_datos.to_csv(ruta_guardado_formato_csv, index=False, encoding="utf-8")

# 🔹 Ruta donde se guardará el archivo Excel con formato
ruta_guardado_formato_excel = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_formato_datos.xlsx"

# 🔹 Guardar en Excel con formato numérico y alineación a la derecha
with pd.ExcelWriter(ruta_guardado_formato_excel, engine="openpyxl") as writer:
    df_combinado_facturacion_recaudos_matriz_formato_datos.to_excel(writer, index=False, sheet_name="Datos Formateados")

    # 🔹 Obtener la hoja de cálculo activa
    workbook = writer.book
    sheet = writer.sheets["Datos Formateados"]

    # 🔹 Aplicar formato numérico con símbolo $ y alineación a la derecha
    formato_moneda = numbers.FORMAT_CURRENCY_USD_SIMPLE  # Formato de moneda en Excel
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=1, max_col=sheet.max_column):
        for cell in row:
            if isinstance(cell.value, (int, float)):  # Solo aplicar formato a valores numéricos
                cell.number_format = formato_moneda  # Formato moneda con $
                cell.alignment = Alignment(horizontal="right")  # Alinear a la derecha

# 🔹 Verificar los resultados
print(f"✅ Archivo CSV con formato guardado en: {ruta_guardado_formato_csv}")
print(f"✅ Archivo Excel con formato guardado en: {ruta_guardado_formato_excel}")

"""### Calculos"""

# Convertir la columna de fecha a tipo datetime si es necesario (ajustar el nombre de la columna si es diferente)
df_combinado_facturacion_recaudos_matriz_renombrado["MES"] = pd.to_datetime(df_combinado_facturacion_recaudos_matriz_renombrado["FECHA FACTURACION"]).dt.strftime("%Y-%m")

# Agrupar por mes y calcular los totales
df_resumen_mensual = df_combinado_facturacion_recaudos_matriz_renombrado.groupby("MES").agg(
    TOTAL_FACTURADO=("VALOR FACTURACION", "sum"),
    TOTAL_RECAUDADO=("VALOR CONSIGNADO", "sum"),
    SALDO_PENDIENTE=("VALOR EN SALDO", "sum")
).reset_index()

# Aplicar formato de moneda a los valores
for columna in ["TOTAL_FACTURADO", "TOTAL_RECAUDADO", "SALDO_PENDIENTE"]:
    df_resumen_mensual[columna] = df_resumen_mensual[columna].apply(aplicar_formato_moneda)

# Guardar la tabla resumen en un nuevo archivo CSV y Excel
ruta_resumen_csv = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/resumen_mensual_facturacion.csv"
ruta_resumen_excel = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/resumen_mensual_facturacion.xlsx"

df_resumen_mensual.to_csv(ruta_resumen_csv, index=False, encoding="utf-8")

# Guardar en Excel con formato
with pd.ExcelWriter(ruta_resumen_excel, engine="openpyxl") as writer:
    df_resumen_mensual.to_excel(writer, index=False, sheet_name="Resumen Mensual")

    # Aplicar formato numérico con símbolo $ y alineación a la derecha
    workbook = writer.book
    sheet = writer.sheets["Resumen Mensual"]
    formato_moneda = numbers.FORMAT_CURRENCY_USD_SIMPLE

    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=2, max_col=4):
        for cell in row:
            if isinstance(cell.value, (int, float)):
                cell.number_format = formato_moneda
                cell.alignment = Alignment(horizontal="right")

print(f"✅ Archivo resumen mensual en CSV guardado en: {ruta_resumen_csv}")
print(f"✅ Archivo resumen mensual en Excel guardado en: {ruta_resumen_excel}")

"""### Validaciones"""

import pandas as pd

# Ruta del archivo generado
ruta_resumen_csv = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/resumen_mensual_facturacion.csv"

# Cargar el archivo en un DataFrame
df_resumen = pd.read_csv(ruta_resumen_csv)

# Mostrar las primeras filas
df_resumen.head()

"""### Validar integridad de los datos"""

# Verificar si hay valores nulos
print("Valores nulos por columna:")
print(df_resumen.isnull().sum())

# Verificar el tipo de datos de cada columna
print("\nTipos de datos de cada columna:")
print(df_resumen.dtypes)

"""### Revisar conversión de fechas"""

# Revisar los valores únicos en la columna MES
print("Valores únicos en la columna MES:")
print(df_resumen["MES"].unique())

"""### Validar cálculos agregados"""

# Recalcular la suma total de cada columna y compararla con los datos originales
print("Suma de valores en el resumen mensual:")
print(df_resumen[["TOTAL_FACTURADO", "TOTAL_RECAUDADO", "SALDO_PENDIENTE"]].sum())

# Opcional: comparar con la base de datos original
ruta_original_csv = "/content/drive/My Drive/Archivos Fuentes/RESULTADO_SOUL_MATRIZ/df_combinado_facturacion_recaudos_matriz_renombrado.csv"
df_original = pd.read_csv(ruta_original_csv)

# Verificar que la suma total sea la misma en el dataset original
print("\nSuma de valores en el dataset original:")
print(df_original[["VALOR FACTURACION", "VALOR CONSIGNADO", "VALOR EN SALDO"]].sum())

"""###  Validar formato de moneda"""

# Función para eliminar el formato de moneda y convertir a número
def limpiar_moneda(valor):
    if isinstance(valor, str):
        return float(valor.replace("$", "").replace(",", ""))
    return valor

# Aplicar la conversión
for columna in ["TOTAL_FACTURADO", "TOTAL_RECAUDADO", "SALDO_PENDIENTE"]:
    df_resumen[columna] = df_resumen[columna].apply(limpiar_moneda)

# Verificar que ahora sean valores numéricos
print(df_resumen.dtypes)